{"version":3,"sources":["/Users/gziolo/PhpstormProjects/gutenberg/packages/i18n/src/index.js"],"names":["Jed","memoize","i18n","logErrorOnce","console","error","setLocaleData","localeData","domain","locale_data","default","options","Object","assign","getI18n","dcnpgettext","context","single","plural","number","toString","__","text","undefined","_x","_n","_nx","sprintf","format","args"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport Jed from 'jed';\nimport memoize from 'memize';\n\nlet i18n;\n\n/**\n * Log to console, once per message; or more precisely, per referentially equal\n * argument set. Because Jed throws errors, we log these to the console instead\n * to avoid crashing the application.\n *\n * @param {...*} args Arguments to pass to `console.error`\n */\nconst logErrorOnce = memoize( console.error ); // eslint-disable-line no-console\n\n/**\n * Merges locale data into the Jed instance by domain. Creates a new Jed\n * instance if one has not yet been assigned.\n *\n * @see http://messageformat.github.io/Jed/\n *\n * @param {?Object} localeData Locale data configuration.\n * @param {?string} domain     Domain for which configuration applies.\n */\nexport function setLocaleData( localeData = { '': {} }, domain = 'default' ) {\n\tif ( ! i18n ) {\n\t\ti18n = new Jed( {\n\t\t\tdomain: 'default',\n\t\t\tlocale_data: {\n\t\t\t\tdefault: {},\n\t\t\t},\n\t\t} );\n\t}\n\n\ti18n.options.locale_data[ domain ] = Object.assign(\n\t\t{},\n\t\ti18n.options.locale_data[ domain ],\n\t\tlocaleData\n\t);\n}\n\n/**\n * Returns the current Jed instance, initializing with a default configuration\n * if not already assigned.\n *\n * @return {Jed} Jed instance.\n */\nexport function getI18n() {\n\tif ( ! i18n ) {\n\t\tsetLocaleData();\n\t}\n\n\treturn i18n;\n}\n\n/**\n * Wrapper for Jed's `dcnpgettext`, its most qualified function. Absorbs errors\n * which are thrown as the result of invalid translation.\n *\n * @param {?string} domain  Domain to retrieve the translated text.\n * @param {?string} context Context information for the translators.\n * @param {string}  single  Text to translate if non-plural. Used as fallback\n *                          return value on a caught error.\n * @param {?string} plural  The text to be used if the number is plural.\n * @param {?number} number  The number to compare against to use either the\n *                          singular or plural form.\n *\n * @return {string} The translated string.\n */\nexport const dcnpgettext = memoize( ( domain = 'default', context, single, plural, number ) => {\n\ttry {\n\t\treturn getI18n().dcnpgettext( domain, context, single, plural, number );\n\t} catch ( error ) {\n\t\tlogErrorOnce( 'Jed localization error: \\n\\n' + error.toString() );\n\n\t\treturn single;\n\t}\n} );\n\n/**\n * Retrieve the translation of text.\n *\n * @see https://developer.wordpress.org/reference/functions/__/\n *\n * @param {string}  text   Text to translate.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} Translated text.\n */\nexport function __( text, domain ) {\n\treturn dcnpgettext( domain, undefined, text );\n}\n\n/**\n * Retrieve translated string with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_x/\n *\n * @param {string}  text    Text to translate.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} Translated context string without pipe.\n */\nexport function _x( text, context, domain ) {\n\treturn dcnpgettext( domain, context, text );\n}\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number.\n *\n * @see https://developer.wordpress.org/reference/functions/_n/\n *\n * @param {string}  single The text to be used if the number is singular.\n * @param {string}  plural The text to be used if the number is plural.\n * @param {number}  number The number to compare against to use either the\n *                         singular or plural form.\n * @param {?string} domain Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\nexport function _n( single, plural, number, domain ) {\n\treturn dcnpgettext( domain, undefined, single, plural, number );\n}\n\n/**\n * Translates and retrieves the singular or plural form based on the supplied\n * number, with gettext context.\n *\n * @see https://developer.wordpress.org/reference/functions/_nx/\n *\n * @param {string}  single  The text to be used if the number is singular.\n * @param {string}  plural  The text to be used if the number is plural.\n * @param {number}  number  The number to compare against to use either the\n *                          singular or plural form.\n * @param {string}  context Context information for the translators.\n * @param {?string} domain  Domain to retrieve the translated text.\n *\n * @return {string} The translated singular or plural form.\n */\nexport function _nx( single, plural, number, context, domain ) {\n\treturn dcnpgettext( domain, context, single, plural, number );\n}\n\n/**\n * Returns a formatted string. If an error occurs in applying the format, the\n * original format string is returned.\n *\n * @param {string}   format  The format of the string to generate.\n * @param {string[]} ...args Arguments to apply to the format.\n *\n * @see http://www.diveintojavascript.com/projects/javascript-sprintf\n *\n * @return {string} The formatted string.\n */\nexport function sprintf( format, ...args ) {\n\ttry {\n\t\treturn Jed.sprintf( format, ...args );\n\t} catch ( error ) {\n\t\tlogErrorOnce( 'Jed sprintf error: \\n\\n' + error.toString() );\n\n\t\treturn format;\n\t}\n}\n"]}